
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import codigo.Traductor.Instruccion;
import codigo.Traductor.TipoInstruccion;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\005\004\000\002\006\005\000\002\006\003\000\002\007" +
    "\005\000\002\007\005\000\002\007\003\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\003\000" +
    "\002\011\005\000\002\011\003\000\002\011\003\000\002" +
    "\011\004\000\002\012\005\000\002\012\005\000\002\012" +
    "\004\000\002\012\003\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\016\007\000\002\016\011\000\002" +
    "\025\002\000\002\017\010\000\002\026\002\000\002\015" +
    "\006\000\002\015\004\000\002\014\003\000\002\014\003" +
    "\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\034\003\033\007\032\031\021\033\023\040" +
    "\010\041\034\042\013\045\016\046\025\047\017\051\014" +
    "\054\027\055\005\001\002\000\004\035\127\001\002\000" +
    "\004\035\126\001\002\000\040\002\ufffe\003\ufffe\007\ufffe" +
    "\031\ufffe\033\ufffe\034\ufffe\040\ufffe\041\ufffe\042\ufffe\045" +
    "\ufffe\046\ufffe\047\ufffe\051\ufffe\054\ufffe\055\ufffe\001\002" +
    "\000\004\035\125\001\002\000\004\045\uffd6\001\002\000" +
    "\040\002\ufffb\003\ufffb\007\ufffb\031\ufffb\033\ufffb\034\ufffb" +
    "\040\ufffb\041\ufffb\042\ufffb\045\ufffb\046\ufffb\047\ufffb\051" +
    "\ufffb\054\ufffb\055\ufffb\001\002\000\004\045\124\001\002" +
    "\000\004\045\uffd5\001\002\000\004\031\uffdb\001\002\000" +
    "\040\002\ufffa\003\ufffa\007\ufffa\031\ufffa\033\ufffa\034\ufffa" +
    "\040\ufffa\041\ufffa\042\ufffa\045\ufffa\046\ufffa\047\ufffa\051" +
    "\ufffa\054\ufffa\055\ufffa\001\002\000\022\006\uffea\007\uffea" +
    "\010\uffea\011\uffea\012\uffea\013\115\032\uffea\035\uffea\001" +
    "\002\000\004\031\063\001\002\000\004\002\062\001\002" +
    "\000\012\007\032\031\021\045\016\046\025\001\002\000" +
    "\040\002\ufff9\003\ufff9\007\ufff9\031\ufff9\033\ufff9\034\ufff9" +
    "\040\ufff9\041\ufff9\042\ufff9\045\ufff9\046\ufff9\047\ufff9\051" +
    "\ufff9\054\ufff9\055\ufff9\001\002\000\036\003\uffd9\007\uffd9" +
    "\031\uffd9\033\uffd9\034\055\040\uffd9\041\uffd9\042\uffd9\045" +
    "\uffd9\046\uffd9\047\uffd9\051\uffd9\054\uffd9\055\uffd9\001\002" +
    "\000\036\002\000\003\033\007\032\031\021\033\023\040" +
    "\010\041\034\042\013\045\016\046\025\047\017\051\014" +
    "\054\027\055\005\001\002\000\040\006\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\012\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\027\uffe9\032\uffe9\035\uffe9\001" +
    "\002\000\012\006\047\007\050\032\ufff3\035\ufff3\001\002" +
    "\000\004\035\046\001\002\000\040\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\012\uffec\020\uffec\021\uffec\022\uffec\023\uffec" +
    "\024\uffec\025\uffec\026\uffec\027\uffec\032\uffec\035\uffec\001" +
    "\002\000\040\006\ufff0\007\ufff0\010\042\011\041\012\040" +
    "\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\032\ufff0\035\ufff0\001\002\000\012\007\032" +
    "\031\021\045\037\046\025\001\002\000\004\035\035\001" +
    "\002\000\004\045\uffd4\001\002\000\040\002\ufff6\003\ufff6" +
    "\007\ufff6\031\ufff6\033\ufff6\034\ufff6\040\ufff6\041\ufff6\042" +
    "\ufff6\045\ufff6\046\ufff6\047\ufff6\051\ufff6\054\ufff6\055\ufff6" +
    "\001\002\000\040\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\032\uffe8\035\uffe8\001\002\000\040\006" +
    "\uffea\007\uffea\010\uffea\011\uffea\012\uffea\020\uffea\021\uffea" +
    "\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\032" +
    "\uffea\035\uffea\001\002\000\012\007\032\031\021\045\037" +
    "\046\025\001\002\000\012\007\032\031\021\045\037\046" +
    "\025\001\002\000\012\007\032\031\021\045\037\046\025" +
    "\001\002\000\040\006\uffef\007\uffef\010\uffef\011\uffef\012" +
    "\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef" +
    "\026\uffef\027\uffef\032\uffef\035\uffef\001\002\000\040\006" +
    "\uffee\007\uffee\010\uffee\011\uffee\012\uffee\020\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\032" +
    "\uffee\035\uffee\001\002\000\040\006\uffed\007\uffed\010\uffed" +
    "\011\uffed\012\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024" +
    "\uffed\025\uffed\026\uffed\027\uffed\032\uffed\035\uffed\001\002" +
    "\000\040\002\ufff8\003\ufff8\007\ufff8\031\ufff8\033\ufff8\034" +
    "\ufff8\040\ufff8\041\ufff8\042\ufff8\045\ufff8\046\ufff8\047\ufff8" +
    "\051\ufff8\054\ufff8\055\ufff8\001\002\000\012\007\032\031" +
    "\021\045\037\046\025\001\002\000\012\007\032\031\021" +
    "\045\037\046\025\001\002\000\040\006\ufff1\007\ufff1\010" +
    "\042\011\041\012\040\020\ufff1\021\ufff1\022\ufff1\023\ufff1" +
    "\024\ufff1\025\ufff1\026\ufff1\027\ufff1\032\ufff1\035\ufff1\001" +
    "\002\000\040\006\ufff2\007\ufff2\010\042\011\041\012\040" +
    "\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026" +
    "\ufff2\027\ufff2\032\ufff2\035\ufff2\001\002\000\040\002\uffff" +
    "\003\uffff\007\uffff\031\uffff\033\uffff\034\uffff\040\uffff\041" +
    "\uffff\042\uffff\045\uffff\046\uffff\047\uffff\051\uffff\054\uffff" +
    "\055\uffff\001\002\000\034\003\033\007\032\031\021\033" +
    "\023\040\010\041\034\042\013\045\016\046\025\047\017" +
    "\051\014\054\027\055\005\001\002\000\042\002\uffd7\003" +
    "\uffd7\007\uffd7\031\uffd7\033\uffd7\034\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\054" +
    "\uffd7\055\uffd7\001\002\000\036\003\033\007\032\031\021" +
    "\033\023\034\057\040\010\041\034\042\013\045\016\046" +
    "\025\047\017\051\014\054\027\055\005\001\002\000\042" +
    "\002\uffd8\003\uffd8\007\uffd8\031\uffd8\033\uffd8\034\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8" +
    "\051\uffd8\054\uffd8\055\uffd8\001\002\000\004\032\061\001" +
    "\002\000\040\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\032\uffeb\035\uffeb\001\002\000\004\002\001" +
    "\001\002\000\014\007\032\030\066\031\021\045\037\046" +
    "\025\001\002\000\022\006\047\007\050\020\104\021\103" +
    "\022\102\023\106\024\101\025\105\001\002\000\004\032" +
    "\075\001\002\000\012\007\032\031\021\045\037\046\025" +
    "\001\002\000\010\026\071\027\070\032\uffe4\001\002\000" +
    "\012\007\032\031\021\045\037\046\025\001\002\000\012" +
    "\007\032\031\021\045\037\046\025\001\002\000\004\032" +
    "\uffe6\001\002\000\004\032\uffe7\001\002\000\004\032\uffe5" +
    "\001\002\000\004\033\023\001\002\000\042\002\uffdd\003" +
    "\uffdd\007\uffdd\031\uffdd\033\uffdd\034\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\045\uffdd\046\uffdd\047\uffdd\050\077\051\uffdd\054" +
    "\uffdd\055\uffdd\001\002\000\004\033\023\001\002\000\040" +
    "\002\uffdc\003\uffdc\007\uffdc\031\uffdc\033\uffdc\034\uffdc\040" +
    "\uffdc\041\uffdc\042\uffdc\045\uffdc\046\uffdc\047\uffdc\051\uffdc" +
    "\054\uffdc\055\uffdc\001\002\000\012\007\032\031\021\045" +
    "\037\046\025\001\002\000\012\007\032\031\021\045\037" +
    "\046\025\001\002\000\012\007\032\031\021\045\037\046" +
    "\025\001\002\000\012\007\032\031\021\045\037\046\025" +
    "\001\002\000\012\007\032\031\021\045\037\046\025\001" +
    "\002\000\012\007\032\031\021\045\037\046\025\001\002" +
    "\000\014\006\047\007\050\026\uffdf\027\uffdf\032\uffdf\001" +
    "\002\000\014\006\047\007\050\026\uffe2\027\uffe2\032\uffe2" +
    "\001\002\000\014\006\047\007\050\026\uffe3\027\uffe3\032" +
    "\uffe3\001\002\000\014\006\047\007\050\026\uffde\027\uffde" +
    "\032\uffde\001\002\000\014\006\047\007\050\026\uffe0\027" +
    "\uffe0\032\uffe0\001\002\000\014\006\047\007\050\026\uffe1" +
    "\027\uffe1\032\uffe1\001\002\000\012\007\032\031\021\045" +
    "\016\046\025\001\002\000\006\032\ufff4\035\ufff4\001\002" +
    "\000\004\031\120\001\002\000\014\007\032\030\066\031" +
    "\021\045\037\046\025\001\002\000\004\032\122\001\002" +
    "\000\004\033\023\001\002\000\040\002\uffda\003\uffda\007" +
    "\uffda\031\uffda\033\uffda\034\uffda\040\uffda\041\uffda\042\uffda" +
    "\045\uffda\046\uffda\047\uffda\051\uffda\054\uffda\055\uffda\001" +
    "\002\000\004\035\ufff5\001\002\000\040\002\ufffc\003\ufffc" +
    "\007\ufffc\031\ufffc\033\ufffc\034\ufffc\040\ufffc\041\ufffc\042" +
    "\ufffc\045\ufffc\046\ufffc\047\ufffc\051\ufffc\054\ufffc\055\ufffc" +
    "\001\002\000\040\002\ufff7\003\ufff7\007\ufff7\031\ufff7\033" +
    "\ufff7\034\ufff7\040\ufff7\041\ufff7\042\ufff7\045\ufff7\046\ufff7" +
    "\047\ufff7\051\ufff7\054\ufff7\055\ufff7\001\002\000\040\002" +
    "\ufffd\003\ufffd\007\ufffd\031\ufffd\033\ufffd\034\ufffd\040\ufffd" +
    "\041\ufffd\042\ufffd\045\ufffd\046\ufffd\047\ufffd\051\ufffd\054" +
    "\ufffd\055\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\032\002\017\003\023\004\005\005\003\006" +
    "\006\007\025\010\030\011\027\014\011\015\021\016\010" +
    "\017\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\057\007\025\010" +
    "\030\011\027\001\001\000\002\001\001\000\004\026\053" +
    "\001\001\000\026\004\052\005\003\006\006\007\025\010" +
    "\030\011\027\014\011\015\021\016\010\017\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\044\001\001" +
    "\000\004\011\043\001\001\000\004\011\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\051\011\027\001\001\000\006\010" +
    "\050\011\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\055\004\005\005\003\006" +
    "\006\007\025\010\030\011\027\014\011\015\021\016\010" +
    "\017\014\001\001\000\002\001\001\000\026\004\052\005" +
    "\003\006\006\007\025\010\030\011\027\014\011\015\021" +
    "\016\010\017\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\063" +
    "\010\030\011\027\012\064\013\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\063\010\030\011\027" +
    "\013\073\001\001\000\002\001\001\000\012\007\063\010" +
    "\030\011\027\013\072\001\001\000\012\007\063\010\030" +
    "\011\027\013\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\075\001\001\000\002" +
    "\001\001\000\004\015\077\001\001\000\002\001\001\000" +
    "\010\007\113\010\030\011\027\001\001\000\010\007\112" +
    "\010\030\011\027\001\001\000\010\007\111\010\030\011" +
    "\027\001\001\000\010\007\110\010\030\011\027\001\001" +
    "\000\010\007\107\010\030\011\027\001\001\000\010\007" +
    "\106\010\030\011\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\115\007\025\010\030" +
    "\011\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\007\063\010\030\011\027\012\120\013\066\001\001" +
    "\000\002\001\001\000\004\015\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private java.util.List<String> syntaxErrors = new java.util.ArrayList<>();
    private Symbol lastToken = null;
    private List<String> erroresSemanticos = new ArrayList<>();
    private SemanticAnalyzer semanticAnalyzer;
    private TablaSimbolos tablaSimbolos;
    private String ambitoActual = "Global";
    private ArrayList<Instruccion> instrucciones = new ArrayList<>();

    // Constructor del parser
    public Parser(Lexer lexer) {
        this(lexer);
        init();
    }

    // Inicialización
    private void init() {
        tablaSimbolos = new TablaSimbolos();
        semanticAnalyzer = new SemanticAnalyzer(tablaSimbolos);
        erroresSemanticos = new ArrayList<>();
        syntaxErrors = new ArrayList<>();
        instrucciones = new ArrayList<>();
        ambitoActual = "Global";
    }

    // Getters
    public List<String> getSyntaxErrors() {
        return syntaxErrors;
    }
    
    public List<String> getSemanticErrors() {
        return semanticAnalyzer != null ? semanticAnalyzer.getErrores() : new ArrayList<>();
    }
    
    public TablaSimbolos getTablaSimbolos() {
        return tablaSimbolos;
    }
    
    public ArrayList<Instruccion> getInstrucciones() {
        return instrucciones;
    }

    private void addError(int line, String message) {
        String error = String.format("Línea %d: Error sintáctico - %s", line, message);
        if (!syntaxErrors.contains(error)) {
            syntaxErrors.add(error);
        }
    }

    // Acciones de producción
    private void handleDeclaration(String id, TipoDato t, int line, int column) {
        if(semanticAnalyzer == null) {
            init(); // Aseguramos que el analizador esté inicializado
        }
        Variable var = new Variable(id, t, ambitoActual, line, column);
        semanticAnalyzer.checkDoubleDefinition(var);
        if (!semanticAnalyzer.hasError()) {
            tablaSimbolos.insertar(var);
            addInstruccion(new Instruccion(TipoInstruccion.DECLARACION, id, null, null, null, line));
        }
    }

    private void addInstruccion(Instruccion instruccion) {
        if (instrucciones == null) {
            instrucciones = new ArrayList<>();
        }
        instrucciones.add(instruccion);
    }

    public void syntax_error(Symbol s) {
        if (s == null) return;
        int line = s.left;
        if (line <= 0) return; 
        lastToken = s;
    }

    public void unrecovered_syntax_error(Symbol s) {
        if (s != null && s.left > 0) {
            addError(s.left, "Error irrecuperable en la estructura");
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= statement_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_list ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= declaration SEMICOLON 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= expr SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= if_statement 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= while_statement 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= block 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= BREAK SEMICOLON 
            {
              Object RESULT =null;
		 semanticAnalyzer.checkLoopControl("break", breakleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;
		 semanticAnalyzer.checkLoopControl("continue", continueleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= error SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration ::= type IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TipoDato t = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        handleDeclaration(id.toString(), t, idleft, idright);
        // Mantenemos el RESULT que es necesario para la gramática
        RESULT = instrucciones.get(instrucciones.size() - 1);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= IDENTIFIER ASSIGN expr 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        semanticAnalyzer.checkUndefinedVariable(id, ambitoActual, idleft);
        if (!semanticAnalyzer.hasError()) {
            Variable var = tablaSimbolos.getVariable(id, ambitoActual);
            semanticAnalyzer.checkTypeCompatibility(var.getTipo(), e.getTipo(), "=", idleft);
            RESULT = e;
            if (e.isConstant()) {
                tablaSimbolos.registerConstant(id, e);
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= arithmetic_expr 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression a = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arithmetic_expr ::= arithmetic_expr PLUS term 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression a = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = semanticAnalyzer.foldConstants(a, "+", t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // arithmetic_expr ::= arithmetic_expr MINUS term 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression a = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = semanticAnalyzer.foldConstants(a, "-", t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arithmetic_expr ::= term 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // term ::= term TIMES primary_expr 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = semanticAnalyzer.foldConstants(t, "*", p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // term ::= term DIVIDE primary_expr 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = semanticAnalyzer.foldConstants(t, "/", p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // term ::= term MOD primary_expr 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = semanticAnalyzer.foldConstants(t, "%", p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // term ::= primary_expr 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // primary_expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // primary_expr ::= IDENTIFIER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        semanticAnalyzer.checkUndefinedVariable(id, ambitoActual, idleft);
        Expression constValue = semanticAnalyzer.propagateConstants(id, ambitoActual);
        RESULT = constValue != null ? constValue : new Expression(TipoDato.INT);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // primary_expr ::= NUMBER 
            {
              Expression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expression(TipoDato.INT, n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // primary_expr ::= MINUS primary_expr 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expression(TipoDato.INT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // logical_expr ::= rel_expr AND rel_expr 
            {
              Boolean RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Boolean r1 = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean r2 = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = true; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // logical_expr ::= rel_expr OR rel_expr 
            {
              Boolean RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Boolean r1 = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean r2 = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = true; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // logical_expr ::= NOT rel_expr 
            {
              Boolean RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = true; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // logical_expr ::= rel_expr 
            {
              Boolean RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean r = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // rel_expr ::= arithmetic_expr EQUALS arithmetic_expr 
            {
              Boolean RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression a1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression a2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        semanticAnalyzer.checkTypeCompatibility(a1.getTipo(), a2.getTipo(), "==", a1left);
        RESULT = true;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // rel_expr ::= arithmetic_expr NOT_EQUALS arithmetic_expr 
            {
              Boolean RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression a1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression a2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // rel_expr ::= arithmetic_expr LT arithmetic_expr 
            {
              Boolean RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression a1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression a2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // rel_expr ::= arithmetic_expr GT arithmetic_expr 
            {
              Boolean RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression a1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression a2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // rel_expr ::= arithmetic_expr LTEQ arithmetic_expr 
            {
              Boolean RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression a1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression a2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // rel_expr ::= arithmetic_expr GTEQ arithmetic_expr 
            {
              Boolean RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression a1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression a2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // if_statement ::= IF LPAREN logical_expr RPAREN block 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        RESULT = new Instruccion(TipoInstruccion.IF, e.toString(), null, null, null, eleft);
        instrucciones.add(RESULT);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // if_statement ::= IF LPAREN logical_expr RPAREN block ELSE block 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        RESULT = new Instruccion(TipoInstruccion.IF_ELSE, e.toString(), null, null, null, eleft);
        instrucciones.add(RESULT);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$0 ::= 
            {
              Object RESULT =null;
 tablaSimbolos.enterLoop(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // while_statement ::= WHILE NT$0 LPAREN logical_expr RPAREN block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
        tablaSimbolos.exitLoop();
        RESULT = new Instruccion(TipoInstruccion.WHILE, e.toString(), null, null, null, eleft);
        instrucciones.add(RESULT);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$1 ::= 
            {
              Object RESULT =null;
 
        String prevAmbito = ambitoActual;
        ambitoActual = ambitoActual + "_" + lbraceleft; 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // block ::= LBRACE NT$1 statement_list RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
        ambitoActual = prevAmbito;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // block ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type ::= INT 
            {
              TipoDato RESULT =null;
		 RESULT = TipoDato.INT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type ::= CHAR 
            {
              TipoDato RESULT =null;
		 RESULT = TipoDato.CHAR; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type ::= VOID 
            {
              TipoDato RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
